/* Restaurant Owners
5 Tables
1x Fact, 4x Dimension
write SQL 3-5 queries analyze data
-- 1x subquery/ with*/

-- sqlite command create table menu 
.mode markdown
.header on

--fact table
CREATE TABLE orders (
  OrderID INT UNIQUE NOT NULL,
  OrderDate DATE NOT NULL,
  MemberID INT,
  MenuID INT NOT NULL,
  PayID INT,
  Amount REAL,
  PRIMARY KEY (OrderID),
  FOREIGN KEY (MemberID) REFERENCES member(MemberID),
  FOREIGN KEY (MenuID) REFERENCES menu(MenuID),
  FOREIGN KEY (PayID) REFERENCES payment(PayID)
);

INSERT INTO orders VALUES
  (1, '2022-11-05', 8, 1, 1, 140.0),
  (2, '2022-11-05', 2, 2, 2, 150.0),
  (3, '2022-11-06', 2, 4, 2, 240.0),
  (4, '2022-11-06', 3, 3, 3, 200.0),
  (5, '2022-11-06', 7, 5, 1, 180.0),
  (6, '2022-11-06', 5, 2, 1, 150.0),
  (7, '2022-11-06', 7, 5, 2, 180.0),
  (8, '2022-11-07', 8, 1, 1, 140.0),
  (9, '2022-11-07', 1, 4, 3, 240.0),
  (10, '2022-11-07', null, 3, 1, 200.0),
  (11, '2022-11-08', 4, 4, 2, 240.0),
  (12, '2022-11-08', 6, 1, 1, 140.0),
  (13, '2022-11-08', 8, 4, 3, 240.0);

--dim table 1
CREATE TABLE menu (
  MenuID INT NOT NULL,
  MenuName TEXT,
  MenuPrice REAL,
  PRIMARY KEY (MenuName),
  FOREIGN KEY (MenuName) REFERENCES ingredient(MenuName)
);

INSERT INTO menu values
(1, 'Grilled Cheese Sandwich', 140.0),
(2, 'Chicken Breast Sandwich', 150.0),
(3, 'Ham Sandwich', 200.0),
(4, 'Club Sandwich', 240.0),
(5, 'Tuna Melt Sandwich', 180.0);

--dim table 2
CREATE TABLE ingredient (
  IngID INT UNIQUE NOT NULL,
  MenuName TEXT,
  IngName TEXT,
  Amount REAL,
  PRIMARY KEY (IngID)
);

INSERT INTO ingredient values
(101, 'Grilled Cheese Sandwich', 'Bread (slice)', 2),
(102, 'Grilled Cheese Sandwich', 'Butter (g)', 50),
(103, 'Grilled Cheese Sandwich', 'Cheddar Cheese (slice)', 2),
(201, 'Chicken Breast Sandwich', 'Bread (slice)', 2),
(202, 'Chicken Breast Sandwich', 'Cheddar Cheese (slice)', 1),
(203, 'Chicken Breast Sandwich', 'Chicken Breast (g)', 150),
(204, 'Chicken Breast Sandwich', 'Tomato (g)', 20),
(205, 'Chicken Breast Sandwich', 'Avocado (g)', 20),
(206, 'Chicken Breast Sandwich', 'Rocket Salad (g)', 20),
(301, 'Ham Sandwich', 'Baguette (slice)', 2),
(302, 'Ham Sandwich', 'Goat Cheese (g)', 100),
(303, 'Ham Sandwich', 'Rocket Salad (g)', 30),
(304, 'Ham Sandwich', 'Ham (g)', 200),
(305, 'Ham Sandwich', 'Tomato (g)', 20),
(401, 'Club Sandwich', 'Bread (slice)', 3),
(402, 'Club Sandwich', 'Ham (g)', 100),
(403, 'Club Sandwich', 'Chicken Breast (g)', 100),
(404, 'Club Sandwich', 'Cheddar Cheese (slice)', 2),
(405, 'Club Sandwich', 'Tomato (g)', 20),
(406, 'Club Sandwich', 'Butter (g)', 20),
(501, 'Tuna Melt Sandwich', 'Bread (slice)', 2),
(502, 'Tuna Melt Sandwich', 'Tuna (g)', 200),
(503, 'Tuna Melt Sandwich', 'Cheddar Cheese (slice)', 1),
(504, 'Tuna Melt Sandwich', 'Tomato (g)', 20),
(505, 'Tuna Melt Sandwich', 'Butter (g)', 20);

--dim table 3
CREATE TABLE payment (
  PayID INT UNIQUE NOT NULL,
  PayType TEXT,
  PRIMARY KEY (PayID)
);

INSERT INTO payment values
(1, 'Cash'),
(2, 'QR Code'),
(3, 'Credit Card');

--dim table 4
CREATE TABLE member (
  MemberID INT UNIQUE,  
  Firstname TEXT,
  Lastname TEXT,
  Email TEXT,
  Birthday DATE,
  Gender TEXT,
  PRIMARY KEY (MemberID)
);

INSERT INTO member values
(1, 'Ochaco', 'Uraraka', 'ochaco.u@gmail.com', '1980-07-31', 'Female'),
(2, 'Izuku', 'Midoriya', 'izuku.m@gmail.com', '1981-08-11', 'Male'),
(3, 'Katsuki', 'Bakugo', 'katsuki.b@gmail.com', '1981-02-13', 'Male'),
(4, 'Shoto', 'Todoroki', 'shoto.t@gmail.com', '1966-06-06', 'Male'),
(5, 'Tsuyu', 'Asui', 'tsuyu.a@gmail.com', '1928-12-06', 'Female'),
(6, 'Denki', 'Kaminari', 'denki.k@gmail.com', '1980-06-05', 'Male'),
(7, 'Hitoshi', 'Shinso', 'hitishi.s@gmail.com', '1979-09-19', 'Male'),
(8, 'Nana', 'Shimura', 'nana.s@gmail.com', '1959-11-03', 'Female');

--Query1: What is the best selling menu?

SELECT 
  sub.MenuName as BestSelling,
  max(sub.Qty)
FROM (
SELECT
  orders.MenuID,
  menu.MenuName,
  count(*) as Qty
FROM orders
JOIN menu 
ON orders.MenuID = menu.MenuID
GROUP BY MenuName
) as sub;

--Query2: How many bread are used as ingredients in the last 3 days?

WITH sub AS (
SELECT
  orders.OrderID,
  orders.MenuID,
  orders.OrderDate,
  menu.MenuName,
  ingredient.IngName,
  ingredient.Amount
FROM orders
JOIN menu 
ON orders.MenuID = menu.MenuID
JOIN ingredient
ON menu.MenuName = ingredient.MenuName
WHERE IngName = 'Bread (slice)' 
  AND OrderDate BETWEEN '2022-11-06' AND '2022-11-08'
ORDER BY OrderID
)
SELECT 
  sub.IngName,
  sum(sub.Amount) AS Total
FROM sub;

--Query3: Create member tier list from total sales. Platinum tier for member who has total sales more than 500 dollars. Gold tier for total sales more than 200 dollars. Silver tier for total sales more than 100 dollars.

SELECT
  orders.MemberID,
  member.Firstname,
  member.Lastname,
  member.Birthday,
  member.Gender,
  sum(orders.Amount) as TotalSales,
  CASE 
    WHEN sum(orders.Amount) > 500.0 THEN 'Platinum'
    WHEN sum(orders.Amount) > 200.0 AND sum(orders.Amount) <= 500.0 THEN 'Gold'
    WHEN sum(orders.Amount) > 100.0 AND sum(orders.Amount) <= 200.0 THEN 'Silver'
    ELSE 'RegularMember'
  END AS MemberTierList
FROM orders
JOIN member
ON orders.MemberID = member.MemberID
GROUP BY orders.MemberID
ORDER BY TotalSales DESC;
